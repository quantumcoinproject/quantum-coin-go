// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package address

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/QuantumCoinProject/qc"
	"github.com/QuantumCoinProject/qc/accounts/abi"
	"github.com/QuantumCoinProject/qc/accounts/abi/bind"
	"github.com/QuantumCoinProject/qc/common"
	"github.com/QuantumCoinProject/qc/core/types"
	"github.com/QuantumCoinProject/qc/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// AddressMetaData contains all meta data concerning the Address contract.
var AddressMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"step\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"checkerBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"testerBalance\",\"type\":\"uint256\"}],\"name\":\"ContractBalances\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"DelegateCallExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"DeployedContractAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"DeployedContractsCount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SenderVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"testName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"TestCompleted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCheckerOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"input\",\"type\":\"address\"}],\"name\":\"getInputAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRunCaller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTesterBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_addressChecker\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"add1\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"add2\",\"type\":\"address\"}],\"name\":\"runAllTests1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_addressChecker\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"add1\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"add2\",\"type\":\"address\"}],\"name\":\"runAllTests2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_addressChecker\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"add1\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"add2\",\"type\":\"address\"}],\"name\":\"runAllTests3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_addressChecker\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"add1\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"add2\",\"type\":\"address\"}],\"name\":\"runAllTests4\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_addressChecker\",\"type\":\"address\"}],\"name\":\"runAllTestsWithDefaultAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"runTestSet1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"runTestSet2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"runTestSet3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"runTestSet4\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"testAddToArray\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"testAddToMapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"testAddressCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"testBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"testCheckArray\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"testCheckMapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testCheckSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"testCodeHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testDelNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"testDelegateCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"testDeployNewContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"testGetDeployedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testGetDeployedContractsCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"testIsContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"testLogAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"testNestedMapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"testSendEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"testSetAndCheckOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"data1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"data2\",\"type\":\"uint256\"}],\"name\":\"testSimpleStruct\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"testUniqueAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"testValidateAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"testWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x60806040527fa0000000000000000000000000000000000000000000000000000000000010006000557fb00000000000000000000000000000000000000000000000000000000000200060015534801561005857600080fd5b50613f46806100686000396000f3fe6080604052600436106102135760003560e01c80635eda713a116101185780638c46d391116100a0578063cb9ccb9c1161006f578063cb9ccb9c14610a67578063e278302614610a92578063e3d11d3f14610ae3578063e4bee36114610afa578063fa06662114610b115761021a565b80638c46d3911461095d5780638e298c96146109745780639a14254b146109c5578063c3da07c914610a165761021a565b80636c2dd5fd116100e75780636c2dd5fd1461078d5780637252ac99146107a45780638083cd721461089657806383fd7119146108d1578063882b3b9f1461090c5761021a565b80635eda713a1461067757806366b661ff146106b25780636bb4f816146107015780636bc29816146107525761021a565b80634067f3bb1161019b5780634d771e071161016a5780634d771e071461055c5780635418a61f146105ab57806357ddc7a2146105e65780635c85923e146106355780635c9ddae01461064c5761021a565b80634067f3bb1461042e578063437255d71461047d578063449caa2b146104a85780634ac0d733146104f75761021a565b80631addb339116101e25780631addb3391461031f5780631f8d3b501461037057806327b2b35d14610387578063288b9897146103d857806338cc4831146104035761021a565b80630bf3051d1461021f578063127c216d1461025a5780631332104e146102a9578063178dd34b146102e45761021a565b3661021a57005b600080fd5b34801561022b57600080fd5b506102586004803603602081101561024257600080fd5b8101908080359060200190929190505050610b60565b005b34801561026657600080fd5b506102a76004803603606081101561027d57600080fd5b81019080803590602001909291908035906020019092919080359060200190929190505050610d55565b005b3480156102b557600080fd5b506102e2600480360360208110156102cc57600080fd5b8101908080359060200190929190505050610df5565b005b3480156102f057600080fd5b5061031d6004803603602081101561030757600080fd5b8101908080359060200190929190505050610e95565b005b34801561032b57600080fd5b506103586004803603602081101561034257600080fd5b8101908080359060200190929190505050611051565b60405180821515815260200191505060405180910390f35b34801561037c57600080fd5b50610385611169565b005b34801561039357600080fd5b506103c0600480360360208110156103aa57600080fd5b8101908080359060200190929190505050611223565b60405180821515815260200191505060405180910390f35b3480156103e457600080fd5b506103ed6112c4565b6040518082815260200191505060405180910390f35b34801561040f57600080fd5b506104186112ca565b6040518082815260200191505060405180910390f35b34801561043a57600080fd5b5061047b6004803603606081101561045157600080fd5b810190808035906020019092919080359060200190929190803590602001909291905050506112d3565b005b34801561048957600080fd5b50610492611373565b6040518082815260200191505060405180910390f35b3480156104b457600080fd5b506104e1600480360360208110156104cb57600080fd5b8101908080359060200190929190505050611407565b6040518082815260200191505060405180910390f35b34801561050357600080fd5b506105446004803603606081101561051a57600080fd5b81019080803590602001909291908035906020019092919080359060200190929190505050611411565b60405180821515815260200191505060405180910390f35b34801561056857600080fd5b506105a96004803603606081101561057f57600080fd5b81019080803590602001909291908035906020019092919080359060200190929190505050611577565b005b3480156105b757600080fd5b506105e4600480360360208110156105ce57600080fd5b8101908080359060200190929190505050611617565b005b3480156105f257600080fd5b5061061f6004803603602081101561060957600080fd5b8101908080359060200190929190505050611691565b6040518082815260200191505060405180910390f35b34801561064157600080fd5b5061064a61179e565b005b34801561065857600080fd5b506106616119ca565b6040518082815260200191505060405180910390f35b34801561068357600080fd5b506106b06004803603602081101561069a57600080fd5b81019080803590602001909291905050506119d2565b005b3480156106be57600080fd5b506106ff600480360360608110156106d557600080fd5b81019080803590602001909291908035906020019092919080359060200190929190505050611a4c565b005b34801561070d57600080fd5b5061073a6004803603602081101561072457600080fd5b8101908080359060200190929190505050611aec565b60405180821515815260200191505060405180910390f35b34801561075e57600080fd5b5061078b6004803603602081101561077557600080fd5b8101908080359060200190929190505050611c04565b005b34801561079957600080fd5b506107a2611d9f565b005b3480156107b057600080fd5b5061087e600480360360608110156107c757600080fd5b8101908080359060200190929190803590602001906401000000008111156107ee57600080fd5b82018360208201111561080057600080fd5b8035906020019184600183028401116401000000008311171561082257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050611e62565b60405180821515815260200191505060405180910390f35b3480156108a257600080fd5b506108cf600480360360208110156108b957600080fd5b8101908080359060200190929190505050612066565b005b3480156108dd57600080fd5b5061090a600480360360208110156108f457600080fd5b8101908080359060200190929190505050612266565b005b34801561091857600080fd5b506109456004803603602081101561092f57600080fd5b8101908080359060200190929190505050612345565b60405180821515815260200191505060405180910390f35b34801561096957600080fd5b506109726123e6565b005b34801561098057600080fd5b506109ad6004803603602081101561099757600080fd5b81019080803590602001909291905050506124b1565b60405180821515815260200191505060405180910390f35b3480156109d157600080fd5b506109fe600480360360208110156109e857600080fd5b81019080803590602001909291905050506125c9565b60405180821515815260200191505060405180910390f35b348015610a2257600080fd5b50610a4f60048036036020811015610a3957600080fd5b810190808035906020019092919050505061266a565b60405180821515815260200191505060405180910390f35b348015610a7357600080fd5b50610a7c612782565b6040518082815260200191505060405180910390f35b348015610a9e57600080fd5b50610acb60048036036020811015610ab557600080fd5b810190808035906020019092919050505061278a565b60405180821515815260200191505060405180910390f35b348015610aef57600080fd5b50610af861282b565b005b348015610b0657600080fd5b50610b0f613590565b005b348015610b1d57600080fd5b50610b4a60048036036020811015610b3457600080fd5b8101908080359060200190929190505050613d06565b6040518082815260200191505060405180910390f35b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166381ea4408836040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015610bc157600080fd5b505af1158015610bd5573d6000803e3d6000fd5b505050506040513d6020811015610beb57600080fd5b810190808051906020019092919050505090506000801b811415610caf577f48e71b6d9e8347b669c55322c62efbefc185466e9ce7e1a8e48d38055ccf67206040518080602001806020018381038352600c8152602001807f74657374436f6465486173680000000000000000000000000000000000000000815250602001838103825260068152602001807f4661696c656400000000000000000000000000000000000000000000000000008152506020019250505060405180910390a1610d51565b7f48e71b6d9e8347b669c55322c62efbefc185466e9ce7e1a8e48d38055ccf67206040518080602001806020018381038352600c8152602001807f74657374436f6465486173680000000000000000000000000000000000000000815250602001838103825260078152602001807f53756363657373000000000000000000000000000000000000000000000000008152506020019250505060405180910390a15b5050565b6000831415610daf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526029815260200180613e486029913960400191505060405180910390fd5b82600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908302179055508160008190555080600181905550610df0611169565b505050565b6000811415610e4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526029815260200180613ec36029913960400191505060405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff02191690830217905550610e82613590565b610e8a61282b565b610e9261179e565b50565b60003090507e494e7c4dab1532eb8dcec5bfad9d4979e7c3dca2f49209e065c10bedd7443d600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1631476040518080602001848152602001838152602001828103825260128152602001807f4265666f7265205472616e73616374696f6e0000000000000000000000000000815250602001935050505060405180910390a1600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1663c1756a2c82846040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b158015610f9b57600080fd5b505af1158015610faf573d6000803e3d6000fd5b505050507e494e7c4dab1532eb8dcec5bfad9d4979e7c3dca2f49209e065c10bedd7443d600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1631476040518080602001848152602001838152602001828103825260118152602001807f4166746572205472616e73616374696f6e000000000000000000000000000000815250602001935050505060405180910390a15050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1663e43252d7836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156110b257600080fd5b505af11580156110c6573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16633af32abf836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561112757600080fd5b505afa15801561113b573d6000803e3d6000fd5b505050506040513d602081101561115157600080fd5b81019080805190602001909291905050509050919050565b6000670de0b6b3a7640000905061117f81610e95565b7f48e71b6d9e8347b669c55322c62efbefc185466e9ce7e1a8e48d38055ccf67206040518080602001806020018381038352600d8152602001807f7465737453656e64457468657200000000000000000000000000000000000000815250602001838103825260078152602001807f53756363657373000000000000000000000000000000000000000000000000008152506020019250505060405180910390a150565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166316279055836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561128257600080fd5b505afa158015611296573d6000803e3d6000fd5b505050506040513d60208110156112ac57600080fd5b81019080805190602001909291905050509050919050565b60035481565b60008054905090565b600083141561132d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526029815260200180613e1f6029913960400191505060405180910390fd5b82600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff02191690830217905550816000819055508060018190555061136e61282b565b505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b1580156113c757600080fd5b505afa1580156113db573d6000803e3d6000fd5b505050506040513d60208110156113f157600080fd5b8101908080519060200190929190505050905090565b6000819050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16637ff52c438585856040518463ffffffff1660e01b8152600401808481526020018381526020018281526020019350505050600060405180830381600087803b15801561148257600080fd5b505af1158015611496573d6000803e3d6000fd5b505050506000806000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1663aec6722d60006040518263ffffffff1660e01b81526004018082815260200191505060606040518083038186803b1580156114fd57600080fd5b505afa158015611511573d6000803e3d6000fd5b505050506040513d606081101561152757600080fd5b81019080805190602001909291908051906020019092919080519060200190929190505050925092509250868314801561156057508582145b801561156b57508481145b93505050509392505050565b60008314156115d1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526029815260200180613e716029913960400191505060405180910390fd5b82600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff02191690830217905550816000819055508060018190555061161261179e565b505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166339989a5d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561167657600080fd5b505af115801561168a573d6000803e3d6000fd5b5050505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166313af4035836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156116f257600080fd5b505af1158015611706573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b15801561175c57600080fd5b505afa158015611770573d6000803e3d6000fd5b505050506040513d602081101561178657600080fd5b81019080805190602001909291905050509050919050565b6117c9600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610b60565b6117d36001611617565b7f48e71b6d9e8347b669c55322c62efbefc185466e9ce7e1a8e48d38055ccf6720604051808060200180602001838103835260158152602001807f746573744465706c6f794e6577436f6e74726163740000000000000000000000815250602001838103825260078152602001807f53756363657373000000000000000000000000000000000000000000000000008152506020019250505060405180910390a161187c6123e6565b7f48e71b6d9e8347b669c55322c62efbefc185466e9ce7e1a8e48d38055ccf67206040518080602001806020018381038352601d8152602001807f746573744765744465706c6f796564436f6e747261637473436f756e74000000815250602001838103825260078152602001807f53756363657373000000000000000000000000000000000000000000000000008152506020019250505060405180910390a16119276000612266565b7f48e71b6d9e8347b669c55322c62efbefc185466e9ce7e1a8e48d38055ccf6720604051808060200180602001838103835260178152602001807f746573744765744465706c6f796564436f6e7472616374000000000000000000815250602001838103825260078152602001807f53756363657373000000000000000000000000000000000000000000000000008152506020019250505060405180910390a1565b600030905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16635f91b0af826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015611a3157600080fd5b505af1158015611a45573d6000803e3d6000fd5b5050505050565b6000831415611aa6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526029815260200180613e9a6029913960400191505060405180910390fd5b82600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908302179055508160008190555080600181905550611ae7613590565b505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166344337ea1836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015611b4d57600080fd5b505af1158015611b61573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1663fe575a87836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611bc257600080fd5b505afa158015611bd6573d6000803e3d6000fd5b505050506040513d6020811015611bec57600080fd5b81019080805190602001909291905050509050919050565b6000816040516024016040516020818303038152906040527f705e22ea000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b60208310611cbd5780518252602082019150602081019050602083039250611c9a565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611d1f576040519150601f19603f3d011682016040523d82523d6000602084013e611d24565b606091505b5050905080611d9b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f416464726573732063616c6c206661696c65640000000000000000000000000081525060200191505060405180910390fd5b5050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166347fb0bed6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611df557600080fd5b505af1158015611e09573d6000803e3d6000fd5b505050506040513d6020811015611e1f57600080fd5b81019080805190602001909291905050509050807fb7dd7e5499cc80c9e84312f64339a5b8f6a9b544849cb8fe6ef9b52e0d470f0160405160405180910390a250565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1663c84d399a8585856040518463ffffffff1660e01b81526004018084815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015611eea578082015181840152602081019050611ecf565b50505050905090810190601f168015611f175780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015611f3857600080fd5b505af1158015611f4c573d6000803e3d6000fd5b505050506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16638d201cf086866040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611fd1578082015181840152602081019050611fb6565b50505050905090810190601f168015611ffe5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561201c57600080fd5b505afa158015612030573d6000803e3d6000fd5b505050506040513d602081101561204657600080fd5b810190808051906020019092919050505090508281149150509392505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682604051602401808281526020019150506040516020818303038152906040527f3fb5c1cb000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b6020831061214c5780518252602082019150602081019050602083039250612129565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d80600081146121ac576040519150601f19603f3d011682016040523d82523d6000602084013e6121b1565b606091505b5050905080612228576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f44656c656761746563616c6c206661696c65640000000000000000000000000081525060200191505060405180910390fd5b337f53d3a45b4f407191100b855ab09b34d1ea01668a1429d379fc2e3a667015fb986003546040518082815260200191505060405180910390a25050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1663831c3172836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156122c557600080fd5b505afa1580156122d9573d6000803e3d6000fd5b505050506040513d60208110156122ef57600080fd5b810190808051906020019092919050505090507fc60171353e00c574bca7a08d6842627b00d33955f090302a6b66ea22b32392c38282604051808381526020018281526020019250505060405180910390a15050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16637287fc4b836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156123a457600080fd5b505afa1580156123b8573d6000803e3d6000fd5b505050506040513d60208110156123ce57600080fd5b81019080805190602001909291905050509050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16635fc7f3346040518163ffffffff1660e01b815260040160206040518083038186803b15801561243a57600080fd5b505afa15801561244e573d6000803e3d6000fd5b505050506040513d602081101561246457600080fd5b810190808051906020019092919050505090507f449eadc90283bbfaf710e4c1a174677bd307cbdae64eb8f02c7ed34760a8c185816040518082815260200191505060405180910390a150565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1663243d9220836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561251257600080fd5b505af1158015612526573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16631d1117c3836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561258757600080fd5b505afa15801561259b573d6000803e3d6000fd5b505050506040513d60208110156125b157600080fd5b81019080805190602001909291905050509050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16631d1117c3836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561262857600080fd5b505afa15801561263c573d6000803e3d6000fd5b505050506040513d602081101561265257600080fd5b81019080805190602001909291905050509050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1663e441e11e836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156126cb57600080fd5b505af11580156126df573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16637287fc4b836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561274057600080fd5b505afa158015612754573d6000803e3d6000fd5b505050506040513d602081101561276a57600080fd5b81019080805190602001909291905050509050919050565b600047905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16635e8e30a6836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156127e957600080fd5b505afa1580156127fd573d6000803e3d6000fd5b505050506040513d602081101561281357600080fd5b81019080805190602001909291905050509050919050565b612856600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611c04565b7f48e71b6d9e8347b669c55322c62efbefc185466e9ce7e1a8e48d38055ccf67206040518080602001806020018381038352600f8152602001807f746573744164647265737343616c6c0000000000000000000000000000000000815250602001838103825260078152602001807f53756363657373000000000000000000000000000000000000000000000000008152506020019250505060405180910390a1612901600a612066565b7f48e71b6d9e8347b669c55322c62efbefc185466e9ce7e1a8e48d38055ccf6720604051808060200180602001838103835260108152602001807f7465737444656c656761746543616c6c00000000000000000000000000000000815250602001838103825260078152602001807f53756363657373000000000000000000000000000000000000000000000000008152506020019250505060405180910390a160006129af60015461278a565b90507f48e71b6d9e8347b669c55322c62efbefc185466e9ce7e1a8e48d38055ccf672081612a12576040518060400160405280600781526020017f496e76616c696400000000000000000000000000000000000000000000000000815250612a49565b6040518060400160405280600581526020017f56616c69640000000000000000000000000000000000000000000000000000008152505b604051808060200180602001838103835260138152602001807f7465737456616c69646174654164647265737300000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015612ac1578082015181840152602081019050612aa6565b50505050905090810190601f168015612aee5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a16000612b09600054613d06565b90507f48e71b6d9e8347b669c55322c62efbefc185466e9ce7e1a8e48d38055ccf672060008211612b6f576040518060400160405280600781526020017f4661696c75726500000000000000000000000000000000000000000000000000815250612ba6565b6040518060400160405280600781526020017f53756363657373000000000000000000000000000000000000000000000000008152505b604051808060200180602001838103835260118152602001807f74657374556e6971756541646472657373000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015612c1e578082015181840152602081019050612c03565b50505050905090810190601f168015612c4b5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a160006040518060400160405280600781526020017f746573744b65790000000000000000000000000000000000000000000000000081525090506000602a90506000612ca86000548484611e62565b90507f48e71b6d9e8347b669c55322c62efbefc185466e9ce7e1a8e48d38055ccf672081612d0b576040518060400160405280600781526020017f4661696c75726500000000000000000000000000000000000000000000000000815250612d42565b6040518060400160405280600781526020017f53756363657373000000000000000000000000000000000000000000000000008152505b604051808060200180602001838103835260118152602001807f746573744e65737465644d617070696e67000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015612dba578082015181840152602081019050612d9f565b50505050905090810190601f168015612de75780820380516001836020036101000a031916815260200191505b50935050505060405180910390a16000612e02600054611051565b90507f48e71b6d9e8347b669c55322c62efbefc185466e9ce7e1a8e48d38055ccf672081612e65576040518060400160405280600f81526020017f4e6f742057686974656c69737465640000000000000000000000000000000000815250612e9c565b6040518060400160405280600b81526020017f57686974656c69737465640000000000000000000000000000000000000000008152505b6040518080602001806020018381038352600d8152602001807f7465737457686974656c69737400000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015612f14578082015181840152602081019050612ef9565b50505050905090810190601f168015612f415780820380516001836020036101000a031916815260200191505b50935050505060405180910390a16000612f5c600154611aec565b90507f48e71b6d9e8347b669c55322c62efbefc185466e9ce7e1a8e48d38055ccf672081612fbf576040518060400160405280600f81526020017f4e6f7420426c61636b6c69737465640000000000000000000000000000000000815250612ff6565b6040518060400160405280600b81526020017f426c61636b6c69737465640000000000000000000000000000000000000000008152505b6040518080602001806020018381038352600d8152602001807f74657374426c61636b6c69737400000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b8381101561306e578082015181840152602081019050613053565b50505050905090810190601f16801561309b5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a16130b46001546119d2565b7f48e71b6d9e8347b669c55322c62efbefc185466e9ce7e1a8e48d38055ccf67206040518080602001806020018381038352600e8152602001807f746573744c6f6741646472657373000000000000000000000000000000000000815250602001838103825260138152602001807f4c6f67676564205375636365737366756c6c79000000000000000000000000008152506020019250505060405180910390a16000613162600054611223565b90507f48e71b6d9e8347b669c55322c62efbefc185466e9ce7e1a8e48d38055ccf6720816131c5576040518060400160405280600f81526020017f4973204e6f7420436f6e747261637400000000000000000000000000000000008152506131fc565b6040518060400160405280600b81526020017f497320436f6e74726163740000000000000000000000000000000000000000008152505b6040518080602001806020018381038352601b8152602001807f746573744973436f6e7472616374207465737441646472657373310000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015613274578082015181840152602081019050613259565b50505050905090810190601f1680156132a15780820380516001836020036101000a031916815260200191505b50935050505060405180910390a16132da600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611223565b90507f48e71b6d9e8347b669c55322c62efbefc185466e9ce7e1a8e48d38055ccf67208161333d576040518060400160405280600f81526020017f4973204e6f7420436f6e74726163740000000000000000000000000000000000815250613374565b6040518060400160405280600b81526020017f497320436f6e74726163740000000000000000000000000000000000000000008152505b6040518080602001806020018381038352601d8152602001807f746573744973436f6e74726163742061646472657373436865636b6572000000815250602001838103825284818151815260200191508051906020019080838360005b838110156133ec5780820151818401526020810190506133d1565b50505050905090810190601f1680156134195780820380516001836020036101000a031916815260200191505b50935050505060405180910390a16000613438600054602a6054611411565b90507f48e71b6d9e8347b669c55322c62efbefc185466e9ce7e1a8e48d38055ccf67208161349b576040518060400160405280600781526020017f4661696c757265000000000000000000000000000000000000000000000000008152506134d2565b6040518060400160405280600781526020017f53756363657373000000000000000000000000000000000000000000000000008152505b604051808060200180602001838103835260108152602001807f7465737453696d706c6553747275637400000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b8381101561354a57808201518184015260208101905061352f565b50505050905090810190601f1680156135775780820380516001836020036101000a031916815260200191505b50935050505060405180910390a1505050505050505050565b613598611d9f565b7f48e71b6d9e8347b669c55322c62efbefc185466e9ce7e1a8e48d38055ccf67206040518080602001806020018381038352600f8152602001807f74657374436865636b53656e6465720000000000000000000000000000000000815250602001838103825260078152602001807f53756363657373000000000000000000000000000000000000000000000000008152506020019250505060405180910390a1600061364660005461266a565b90507f48e71b6d9e8347b669c55322c62efbefc185466e9ce7e1a8e48d38055ccf6720816136a9576040518060400160405280600781526020017f4661696c757265000000000000000000000000000000000000000000000000008152506136e0565b6040518060400160405280600781526020017f53756363657373000000000000000000000000000000000000000000000000008152505b604051808060200180602001838103835260108152602001807f74657374416464546f4d617070696e6700000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b8381101561375857808201518184015260208101905061373d565b50505050905090810190601f1680156137855780820380516001836020036101000a031916815260200191505b50935050505060405180910390a160006137a0600054612345565b90507f48e71b6d9e8347b669c55322c62efbefc185466e9ce7e1a8e48d38055ccf672081613803576040518060400160405280600781526020017f4661696c7572650000000000000000000000000000000000000000000000000081525061383a565b6040518060400160405280600781526020017f53756363657373000000000000000000000000000000000000000000000000008152505b604051808060200180602001838103835260108152602001807f74657374436865636b4d617070696e6700000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156138b2578082015181840152602081019050613897565b50505050905090810190601f1680156138df5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a160006138fa6000546124b1565b90507f48e71b6d9e8347b669c55322c62efbefc185466e9ce7e1a8e48d38055ccf67208161395d576040518060400160405280600781526020017f4661696c75726500000000000000000000000000000000000000000000000000815250613994565b6040518060400160405280600781526020017f53756363657373000000000000000000000000000000000000000000000000008152505b6040518080602001806020018381038352600e8152602001807f74657374416464546f4172726179000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015613a0c5780820151818401526020810190506139f1565b50505050905090810190601f168015613a395780820380516001836020036101000a031916815260200191505b50935050505060405180910390a16000613a546000546125c9565b90507f48e71b6d9e8347b669c55322c62efbefc185466e9ce7e1a8e48d38055ccf672081613ab7576040518060400160405280600781526020017f4661696c75726500000000000000000000000000000000000000000000000000815250613aee565b6040518060400160405280600781526020017f53756363657373000000000000000000000000000000000000000000000000008152505b6040518080602001806020018381038352600e8152602001807f74657374436865636b4172726179000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015613b66578082015181840152602081019050613b4b565b50505050905090810190601f168015613b935780820380516001836020036101000a031916815260200191505b50935050505060405180910390a16000613bae600054611691565b90507f48e71b6d9e8347b669c55322c62efbefc185466e9ce7e1a8e48d38055ccf67206000548214613c15576040518060400160405280600781526020017f4661696c75726500000000000000000000000000000000000000000000000000815250613c4c565b6040518060400160405280600781526020017f53756363657373000000000000000000000000000000000000000000000000008152505b604051808060200180602001838103835260148152602001807f74657374536574416e64436865636b4f776e6572000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015613cc4578082015181840152602081019050613ca9565b50505050905090810190601f168015613cf15780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16638942a94e836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015613d6757600080fd5b505af1158015613d7b573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1663b31610db836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015613ddc57600080fd5b505afa158015613df0573d6000803e3d6000fd5b505050506040513d6020811015613e0657600080fd5b8101908080519060200190929190505050905091905056fe496e76616c69642041646472657373436865636b657220636f6e747261637420616464726573732063496e76616c69642041646472657373436865636b657220636f6e747261637420616464726573732065496e76616c69642041646472657373436865636b657220636f6e747261637420616464726573732064496e76616c69642041646472657373436865636b657220636f6e747261637420616464726573732062496e76616c69642041646472657373436865636b657220636f6e747261637420616464726573732061a2646970667358221220e1fc53867115d797bf2f12154cfa424a022bf3a98fd0959c741b79f76c3c03bd64736f6c637827302e372e362d646576656c6f702e323032352e322e31332b636f6d6d69742e34663635373333610058",
}

// AddressABI is the input ABI used to generate the binding from.
// Deprecated: Use AddressMetaData.ABI instead.
var AddressABI = AddressMetaData.ABI

// AddressBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AddressMetaData.Bin instead.
var AddressBin = AddressMetaData.Bin

// DeployAddress deploys a new Ethereum contract, binding an instance of Address to it.
func DeployAddress(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Address, error) {
	parsed, err := AddressMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AddressBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Address{AddressCaller: AddressCaller{contract: contract}, AddressTransactor: AddressTransactor{contract: contract}, AddressFilterer: AddressFilterer{contract: contract}}, nil
}

// Address is an auto generated Go binding around an Ethereum contract.
type Address struct {
	AddressCaller     // Read-only binding to the contract
	AddressTransactor // Write-only binding to the contract
	AddressFilterer   // Log filterer for contract events
}

// AddressCaller is an auto generated read-only Go binding around an Ethereum contract.
type AddressCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AddressTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AddressTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AddressFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AddressFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AddressSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AddressSession struct {
	Contract     *Address          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AddressCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AddressCallerSession struct {
	Contract *AddressCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// AddressTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AddressTransactorSession struct {
	Contract     *AddressTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// AddressRaw is an auto generated low-level Go binding around an Ethereum contract.
type AddressRaw struct {
	Contract *Address // Generic contract binding to access the raw methods on
}

// AddressCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AddressCallerRaw struct {
	Contract *AddressCaller // Generic read-only contract binding to access the raw methods on
}

// AddressTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AddressTransactorRaw struct {
	Contract *AddressTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAddress creates a new instance of Address, bound to a specific deployed contract.
func NewAddress(address common.Address, backend bind.ContractBackend) (*Address, error) {
	contract, err := bindAddress(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Address{AddressCaller: AddressCaller{contract: contract}, AddressTransactor: AddressTransactor{contract: contract}, AddressFilterer: AddressFilterer{contract: contract}}, nil
}

// NewAddressCaller creates a new read-only instance of Address, bound to a specific deployed contract.
func NewAddressCaller(address common.Address, caller bind.ContractCaller) (*AddressCaller, error) {
	contract, err := bindAddress(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AddressCaller{contract: contract}, nil
}

// NewAddressTransactor creates a new write-only instance of Address, bound to a specific deployed contract.
func NewAddressTransactor(address common.Address, transactor bind.ContractTransactor) (*AddressTransactor, error) {
	contract, err := bindAddress(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AddressTransactor{contract: contract}, nil
}

// NewAddressFilterer creates a new log filterer instance of Address, bound to a specific deployed contract.
func NewAddressFilterer(address common.Address, filterer bind.ContractFilterer) (*AddressFilterer, error) {
	contract, err := bindAddress(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AddressFilterer{contract: contract}, nil
}

// bindAddress binds a generic wrapper to an already deployed contract.
func bindAddress(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AddressABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Address *AddressRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Address.Contract.AddressCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Address *AddressRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Address.Contract.AddressTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Address *AddressRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Address.Contract.AddressTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Address *AddressCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Address.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Address *AddressTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Address.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Address *AddressTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Address.Contract.contract.Transact(opts, method, params...)
}

// GetAddress is a free data retrieval call binding the contract method 0x38cc4831.
//
// Solidity: function getAddress() view returns(address)
func (_Address *AddressCaller) GetAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Address.contract.Call(opts, &out, "getAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAddress is a free data retrieval call binding the contract method 0x38cc4831.
//
// Solidity: function getAddress() view returns(address)
func (_Address *AddressSession) GetAddress() (common.Address, error) {
	return _Address.Contract.GetAddress(&_Address.CallOpts)
}

// GetAddress is a free data retrieval call binding the contract method 0x38cc4831.
//
// Solidity: function getAddress() view returns(address)
func (_Address *AddressCallerSession) GetAddress() (common.Address, error) {
	return _Address.Contract.GetAddress(&_Address.CallOpts)
}

// GetCheckerOwner is a free data retrieval call binding the contract method 0x437255d7.
//
// Solidity: function getCheckerOwner() view returns(address)
func (_Address *AddressCaller) GetCheckerOwner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Address.contract.Call(opts, &out, "getCheckerOwner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetCheckerOwner is a free data retrieval call binding the contract method 0x437255d7.
//
// Solidity: function getCheckerOwner() view returns(address)
func (_Address *AddressSession) GetCheckerOwner() (common.Address, error) {
	return _Address.Contract.GetCheckerOwner(&_Address.CallOpts)
}

// GetCheckerOwner is a free data retrieval call binding the contract method 0x437255d7.
//
// Solidity: function getCheckerOwner() view returns(address)
func (_Address *AddressCallerSession) GetCheckerOwner() (common.Address, error) {
	return _Address.Contract.GetCheckerOwner(&_Address.CallOpts)
}

// GetInputAddress is a free data retrieval call binding the contract method 0x449caa2b.
//
// Solidity: function getInputAddress(address input) pure returns(address)
func (_Address *AddressCaller) GetInputAddress(opts *bind.CallOpts, input common.Address) (common.Address, error) {
	var out []interface{}
	err := _Address.contract.Call(opts, &out, "getInputAddress", input)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetInputAddress is a free data retrieval call binding the contract method 0x449caa2b.
//
// Solidity: function getInputAddress(address input) pure returns(address)
func (_Address *AddressSession) GetInputAddress(input common.Address) (common.Address, error) {
	return _Address.Contract.GetInputAddress(&_Address.CallOpts, input)
}

// GetInputAddress is a free data retrieval call binding the contract method 0x449caa2b.
//
// Solidity: function getInputAddress(address input) pure returns(address)
func (_Address *AddressCallerSession) GetInputAddress(input common.Address) (common.Address, error) {
	return _Address.Contract.GetInputAddress(&_Address.CallOpts, input)
}

// GetRunCaller is a free data retrieval call binding the contract method 0x5c9ddae0.
//
// Solidity: function getRunCaller() view returns(address)
func (_Address *AddressCaller) GetRunCaller(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Address.contract.Call(opts, &out, "getRunCaller")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRunCaller is a free data retrieval call binding the contract method 0x5c9ddae0.
//
// Solidity: function getRunCaller() view returns(address)
func (_Address *AddressSession) GetRunCaller() (common.Address, error) {
	return _Address.Contract.GetRunCaller(&_Address.CallOpts)
}

// GetRunCaller is a free data retrieval call binding the contract method 0x5c9ddae0.
//
// Solidity: function getRunCaller() view returns(address)
func (_Address *AddressCallerSession) GetRunCaller() (common.Address, error) {
	return _Address.Contract.GetRunCaller(&_Address.CallOpts)
}

// GetTesterBalance is a free data retrieval call binding the contract method 0xcb9ccb9c.
//
// Solidity: function getTesterBalance() view returns(uint256)
func (_Address *AddressCaller) GetTesterBalance(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Address.contract.Call(opts, &out, "getTesterBalance")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTesterBalance is a free data retrieval call binding the contract method 0xcb9ccb9c.
//
// Solidity: function getTesterBalance() view returns(uint256)
func (_Address *AddressSession) GetTesterBalance() (*big.Int, error) {
	return _Address.Contract.GetTesterBalance(&_Address.CallOpts)
}

// GetTesterBalance is a free data retrieval call binding the contract method 0xcb9ccb9c.
//
// Solidity: function getTesterBalance() view returns(uint256)
func (_Address *AddressCallerSession) GetTesterBalance() (*big.Int, error) {
	return _Address.Contract.GetTesterBalance(&_Address.CallOpts)
}

// TestCheckArray is a free data retrieval call binding the contract method 0x9a14254b.
//
// Solidity: function testCheckArray(address _addr) view returns(bool)
func (_Address *AddressCaller) TestCheckArray(opts *bind.CallOpts, _addr common.Address) (bool, error) {
	var out []interface{}
	err := _Address.contract.Call(opts, &out, "testCheckArray", _addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// TestCheckArray is a free data retrieval call binding the contract method 0x9a14254b.
//
// Solidity: function testCheckArray(address _addr) view returns(bool)
func (_Address *AddressSession) TestCheckArray(_addr common.Address) (bool, error) {
	return _Address.Contract.TestCheckArray(&_Address.CallOpts, _addr)
}

// TestCheckArray is a free data retrieval call binding the contract method 0x9a14254b.
//
// Solidity: function testCheckArray(address _addr) view returns(bool)
func (_Address *AddressCallerSession) TestCheckArray(_addr common.Address) (bool, error) {
	return _Address.Contract.TestCheckArray(&_Address.CallOpts, _addr)
}

// TestCheckMapping is a free data retrieval call binding the contract method 0x882b3b9f.
//
// Solidity: function testCheckMapping(address _addr) view returns(bool)
func (_Address *AddressCaller) TestCheckMapping(opts *bind.CallOpts, _addr common.Address) (bool, error) {
	var out []interface{}
	err := _Address.contract.Call(opts, &out, "testCheckMapping", _addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// TestCheckMapping is a free data retrieval call binding the contract method 0x882b3b9f.
//
// Solidity: function testCheckMapping(address _addr) view returns(bool)
func (_Address *AddressSession) TestCheckMapping(_addr common.Address) (bool, error) {
	return _Address.Contract.TestCheckMapping(&_Address.CallOpts, _addr)
}

// TestCheckMapping is a free data retrieval call binding the contract method 0x882b3b9f.
//
// Solidity: function testCheckMapping(address _addr) view returns(bool)
func (_Address *AddressCallerSession) TestCheckMapping(_addr common.Address) (bool, error) {
	return _Address.Contract.TestCheckMapping(&_Address.CallOpts, _addr)
}

// TestDelNumber is a free data retrieval call binding the contract method 0x288b9897.
//
// Solidity: function testDelNumber() view returns(uint256)
func (_Address *AddressCaller) TestDelNumber(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Address.contract.Call(opts, &out, "testDelNumber")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TestDelNumber is a free data retrieval call binding the contract method 0x288b9897.
//
// Solidity: function testDelNumber() view returns(uint256)
func (_Address *AddressSession) TestDelNumber() (*big.Int, error) {
	return _Address.Contract.TestDelNumber(&_Address.CallOpts)
}

// TestDelNumber is a free data retrieval call binding the contract method 0x288b9897.
//
// Solidity: function testDelNumber() view returns(uint256)
func (_Address *AddressCallerSession) TestDelNumber() (*big.Int, error) {
	return _Address.Contract.TestDelNumber(&_Address.CallOpts)
}

// TestIsContract is a free data retrieval call binding the contract method 0x27b2b35d.
//
// Solidity: function testIsContract(address _addr) view returns(bool)
func (_Address *AddressCaller) TestIsContract(opts *bind.CallOpts, _addr common.Address) (bool, error) {
	var out []interface{}
	err := _Address.contract.Call(opts, &out, "testIsContract", _addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// TestIsContract is a free data retrieval call binding the contract method 0x27b2b35d.
//
// Solidity: function testIsContract(address _addr) view returns(bool)
func (_Address *AddressSession) TestIsContract(_addr common.Address) (bool, error) {
	return _Address.Contract.TestIsContract(&_Address.CallOpts, _addr)
}

// TestIsContract is a free data retrieval call binding the contract method 0x27b2b35d.
//
// Solidity: function testIsContract(address _addr) view returns(bool)
func (_Address *AddressCallerSession) TestIsContract(_addr common.Address) (bool, error) {
	return _Address.Contract.TestIsContract(&_Address.CallOpts, _addr)
}

// TestValidateAddress is a free data retrieval call binding the contract method 0xe2783026.
//
// Solidity: function testValidateAddress(address _addr) view returns(bool)
func (_Address *AddressCaller) TestValidateAddress(opts *bind.CallOpts, _addr common.Address) (bool, error) {
	var out []interface{}
	err := _Address.contract.Call(opts, &out, "testValidateAddress", _addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// TestValidateAddress is a free data retrieval call binding the contract method 0xe2783026.
//
// Solidity: function testValidateAddress(address _addr) view returns(bool)
func (_Address *AddressSession) TestValidateAddress(_addr common.Address) (bool, error) {
	return _Address.Contract.TestValidateAddress(&_Address.CallOpts, _addr)
}

// TestValidateAddress is a free data retrieval call binding the contract method 0xe2783026.
//
// Solidity: function testValidateAddress(address _addr) view returns(bool)
func (_Address *AddressCallerSession) TestValidateAddress(_addr common.Address) (bool, error) {
	return _Address.Contract.TestValidateAddress(&_Address.CallOpts, _addr)
}

// RunAllTests1 is a paid mutator transaction binding the contract method 0x66b661ff.
//
// Solidity: function runAllTests1(address _addressChecker, address add1, address add2) returns()
func (_Address *AddressTransactor) RunAllTests1(opts *bind.TransactOpts, _addressChecker common.Address, add1 common.Address, add2 common.Address) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "runAllTests1", _addressChecker, add1, add2)
}

// RunAllTests1 is a paid mutator transaction binding the contract method 0x66b661ff.
//
// Solidity: function runAllTests1(address _addressChecker, address add1, address add2) returns()
func (_Address *AddressSession) RunAllTests1(_addressChecker common.Address, add1 common.Address, add2 common.Address) (*types.Transaction, error) {
	return _Address.Contract.RunAllTests1(&_Address.TransactOpts, _addressChecker, add1, add2)
}

// RunAllTests1 is a paid mutator transaction binding the contract method 0x66b661ff.
//
// Solidity: function runAllTests1(address _addressChecker, address add1, address add2) returns()
func (_Address *AddressTransactorSession) RunAllTests1(_addressChecker common.Address, add1 common.Address, add2 common.Address) (*types.Transaction, error) {
	return _Address.Contract.RunAllTests1(&_Address.TransactOpts, _addressChecker, add1, add2)
}

// RunAllTests2 is a paid mutator transaction binding the contract method 0x4067f3bb.
//
// Solidity: function runAllTests2(address _addressChecker, address add1, address add2) returns()
func (_Address *AddressTransactor) RunAllTests2(opts *bind.TransactOpts, _addressChecker common.Address, add1 common.Address, add2 common.Address) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "runAllTests2", _addressChecker, add1, add2)
}

// RunAllTests2 is a paid mutator transaction binding the contract method 0x4067f3bb.
//
// Solidity: function runAllTests2(address _addressChecker, address add1, address add2) returns()
func (_Address *AddressSession) RunAllTests2(_addressChecker common.Address, add1 common.Address, add2 common.Address) (*types.Transaction, error) {
	return _Address.Contract.RunAllTests2(&_Address.TransactOpts, _addressChecker, add1, add2)
}

// RunAllTests2 is a paid mutator transaction binding the contract method 0x4067f3bb.
//
// Solidity: function runAllTests2(address _addressChecker, address add1, address add2) returns()
func (_Address *AddressTransactorSession) RunAllTests2(_addressChecker common.Address, add1 common.Address, add2 common.Address) (*types.Transaction, error) {
	return _Address.Contract.RunAllTests2(&_Address.TransactOpts, _addressChecker, add1, add2)
}

// RunAllTests3 is a paid mutator transaction binding the contract method 0x4d771e07.
//
// Solidity: function runAllTests3(address _addressChecker, address add1, address add2) returns()
func (_Address *AddressTransactor) RunAllTests3(opts *bind.TransactOpts, _addressChecker common.Address, add1 common.Address, add2 common.Address) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "runAllTests3", _addressChecker, add1, add2)
}

// RunAllTests3 is a paid mutator transaction binding the contract method 0x4d771e07.
//
// Solidity: function runAllTests3(address _addressChecker, address add1, address add2) returns()
func (_Address *AddressSession) RunAllTests3(_addressChecker common.Address, add1 common.Address, add2 common.Address) (*types.Transaction, error) {
	return _Address.Contract.RunAllTests3(&_Address.TransactOpts, _addressChecker, add1, add2)
}

// RunAllTests3 is a paid mutator transaction binding the contract method 0x4d771e07.
//
// Solidity: function runAllTests3(address _addressChecker, address add1, address add2) returns()
func (_Address *AddressTransactorSession) RunAllTests3(_addressChecker common.Address, add1 common.Address, add2 common.Address) (*types.Transaction, error) {
	return _Address.Contract.RunAllTests3(&_Address.TransactOpts, _addressChecker, add1, add2)
}

// RunAllTests4 is a paid mutator transaction binding the contract method 0x127c216d.
//
// Solidity: function runAllTests4(address _addressChecker, address add1, address add2) returns()
func (_Address *AddressTransactor) RunAllTests4(opts *bind.TransactOpts, _addressChecker common.Address, add1 common.Address, add2 common.Address) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "runAllTests4", _addressChecker, add1, add2)
}

// RunAllTests4 is a paid mutator transaction binding the contract method 0x127c216d.
//
// Solidity: function runAllTests4(address _addressChecker, address add1, address add2) returns()
func (_Address *AddressSession) RunAllTests4(_addressChecker common.Address, add1 common.Address, add2 common.Address) (*types.Transaction, error) {
	return _Address.Contract.RunAllTests4(&_Address.TransactOpts, _addressChecker, add1, add2)
}

// RunAllTests4 is a paid mutator transaction binding the contract method 0x127c216d.
//
// Solidity: function runAllTests4(address _addressChecker, address add1, address add2) returns()
func (_Address *AddressTransactorSession) RunAllTests4(_addressChecker common.Address, add1 common.Address, add2 common.Address) (*types.Transaction, error) {
	return _Address.Contract.RunAllTests4(&_Address.TransactOpts, _addressChecker, add1, add2)
}

// RunAllTestsWithDefaultAddress is a paid mutator transaction binding the contract method 0x1332104e.
//
// Solidity: function runAllTestsWithDefaultAddress(address _addressChecker) returns()
func (_Address *AddressTransactor) RunAllTestsWithDefaultAddress(opts *bind.TransactOpts, _addressChecker common.Address) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "runAllTestsWithDefaultAddress", _addressChecker)
}

// RunAllTestsWithDefaultAddress is a paid mutator transaction binding the contract method 0x1332104e.
//
// Solidity: function runAllTestsWithDefaultAddress(address _addressChecker) returns()
func (_Address *AddressSession) RunAllTestsWithDefaultAddress(_addressChecker common.Address) (*types.Transaction, error) {
	return _Address.Contract.RunAllTestsWithDefaultAddress(&_Address.TransactOpts, _addressChecker)
}

// RunAllTestsWithDefaultAddress is a paid mutator transaction binding the contract method 0x1332104e.
//
// Solidity: function runAllTestsWithDefaultAddress(address _addressChecker) returns()
func (_Address *AddressTransactorSession) RunAllTestsWithDefaultAddress(_addressChecker common.Address) (*types.Transaction, error) {
	return _Address.Contract.RunAllTestsWithDefaultAddress(&_Address.TransactOpts, _addressChecker)
}

// RunTestSet1 is a paid mutator transaction binding the contract method 0xe4bee361.
//
// Solidity: function runTestSet1() returns()
func (_Address *AddressTransactor) RunTestSet1(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "runTestSet1")
}

// RunTestSet1 is a paid mutator transaction binding the contract method 0xe4bee361.
//
// Solidity: function runTestSet1() returns()
func (_Address *AddressSession) RunTestSet1() (*types.Transaction, error) {
	return _Address.Contract.RunTestSet1(&_Address.TransactOpts)
}

// RunTestSet1 is a paid mutator transaction binding the contract method 0xe4bee361.
//
// Solidity: function runTestSet1() returns()
func (_Address *AddressTransactorSession) RunTestSet1() (*types.Transaction, error) {
	return _Address.Contract.RunTestSet1(&_Address.TransactOpts)
}

// RunTestSet2 is a paid mutator transaction binding the contract method 0xe3d11d3f.
//
// Solidity: function runTestSet2() returns()
func (_Address *AddressTransactor) RunTestSet2(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "runTestSet2")
}

// RunTestSet2 is a paid mutator transaction binding the contract method 0xe3d11d3f.
//
// Solidity: function runTestSet2() returns()
func (_Address *AddressSession) RunTestSet2() (*types.Transaction, error) {
	return _Address.Contract.RunTestSet2(&_Address.TransactOpts)
}

// RunTestSet2 is a paid mutator transaction binding the contract method 0xe3d11d3f.
//
// Solidity: function runTestSet2() returns()
func (_Address *AddressTransactorSession) RunTestSet2() (*types.Transaction, error) {
	return _Address.Contract.RunTestSet2(&_Address.TransactOpts)
}

// RunTestSet3 is a paid mutator transaction binding the contract method 0x5c85923e.
//
// Solidity: function runTestSet3() returns()
func (_Address *AddressTransactor) RunTestSet3(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "runTestSet3")
}

// RunTestSet3 is a paid mutator transaction binding the contract method 0x5c85923e.
//
// Solidity: function runTestSet3() returns()
func (_Address *AddressSession) RunTestSet3() (*types.Transaction, error) {
	return _Address.Contract.RunTestSet3(&_Address.TransactOpts)
}

// RunTestSet3 is a paid mutator transaction binding the contract method 0x5c85923e.
//
// Solidity: function runTestSet3() returns()
func (_Address *AddressTransactorSession) RunTestSet3() (*types.Transaction, error) {
	return _Address.Contract.RunTestSet3(&_Address.TransactOpts)
}

// RunTestSet4 is a paid mutator transaction binding the contract method 0x1f8d3b50.
//
// Solidity: function runTestSet4() returns()
func (_Address *AddressTransactor) RunTestSet4(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "runTestSet4")
}

// RunTestSet4 is a paid mutator transaction binding the contract method 0x1f8d3b50.
//
// Solidity: function runTestSet4() returns()
func (_Address *AddressSession) RunTestSet4() (*types.Transaction, error) {
	return _Address.Contract.RunTestSet4(&_Address.TransactOpts)
}

// RunTestSet4 is a paid mutator transaction binding the contract method 0x1f8d3b50.
//
// Solidity: function runTestSet4() returns()
func (_Address *AddressTransactorSession) RunTestSet4() (*types.Transaction, error) {
	return _Address.Contract.RunTestSet4(&_Address.TransactOpts)
}

// TestAddToArray is a paid mutator transaction binding the contract method 0x8e298c96.
//
// Solidity: function testAddToArray(address _addr) returns(bool)
func (_Address *AddressTransactor) TestAddToArray(opts *bind.TransactOpts, _addr common.Address) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "testAddToArray", _addr)
}

// TestAddToArray is a paid mutator transaction binding the contract method 0x8e298c96.
//
// Solidity: function testAddToArray(address _addr) returns(bool)
func (_Address *AddressSession) TestAddToArray(_addr common.Address) (*types.Transaction, error) {
	return _Address.Contract.TestAddToArray(&_Address.TransactOpts, _addr)
}

// TestAddToArray is a paid mutator transaction binding the contract method 0x8e298c96.
//
// Solidity: function testAddToArray(address _addr) returns(bool)
func (_Address *AddressTransactorSession) TestAddToArray(_addr common.Address) (*types.Transaction, error) {
	return _Address.Contract.TestAddToArray(&_Address.TransactOpts, _addr)
}

// TestAddToMapping is a paid mutator transaction binding the contract method 0xc3da07c9.
//
// Solidity: function testAddToMapping(address _addr) returns(bool)
func (_Address *AddressTransactor) TestAddToMapping(opts *bind.TransactOpts, _addr common.Address) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "testAddToMapping", _addr)
}

// TestAddToMapping is a paid mutator transaction binding the contract method 0xc3da07c9.
//
// Solidity: function testAddToMapping(address _addr) returns(bool)
func (_Address *AddressSession) TestAddToMapping(_addr common.Address) (*types.Transaction, error) {
	return _Address.Contract.TestAddToMapping(&_Address.TransactOpts, _addr)
}

// TestAddToMapping is a paid mutator transaction binding the contract method 0xc3da07c9.
//
// Solidity: function testAddToMapping(address _addr) returns(bool)
func (_Address *AddressTransactorSession) TestAddToMapping(_addr common.Address) (*types.Transaction, error) {
	return _Address.Contract.TestAddToMapping(&_Address.TransactOpts, _addr)
}

// TestAddressCall is a paid mutator transaction binding the contract method 0x6bc29816.
//
// Solidity: function testAddressCall(address _addr) returns()
func (_Address *AddressTransactor) TestAddressCall(opts *bind.TransactOpts, _addr common.Address) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "testAddressCall", _addr)
}

// TestAddressCall is a paid mutator transaction binding the contract method 0x6bc29816.
//
// Solidity: function testAddressCall(address _addr) returns()
func (_Address *AddressSession) TestAddressCall(_addr common.Address) (*types.Transaction, error) {
	return _Address.Contract.TestAddressCall(&_Address.TransactOpts, _addr)
}

// TestAddressCall is a paid mutator transaction binding the contract method 0x6bc29816.
//
// Solidity: function testAddressCall(address _addr) returns()
func (_Address *AddressTransactorSession) TestAddressCall(_addr common.Address) (*types.Transaction, error) {
	return _Address.Contract.TestAddressCall(&_Address.TransactOpts, _addr)
}

// TestBlacklist is a paid mutator transaction binding the contract method 0x6bb4f816.
//
// Solidity: function testBlacklist(address _addr) returns(bool)
func (_Address *AddressTransactor) TestBlacklist(opts *bind.TransactOpts, _addr common.Address) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "testBlacklist", _addr)
}

// TestBlacklist is a paid mutator transaction binding the contract method 0x6bb4f816.
//
// Solidity: function testBlacklist(address _addr) returns(bool)
func (_Address *AddressSession) TestBlacklist(_addr common.Address) (*types.Transaction, error) {
	return _Address.Contract.TestBlacklist(&_Address.TransactOpts, _addr)
}

// TestBlacklist is a paid mutator transaction binding the contract method 0x6bb4f816.
//
// Solidity: function testBlacklist(address _addr) returns(bool)
func (_Address *AddressTransactorSession) TestBlacklist(_addr common.Address) (*types.Transaction, error) {
	return _Address.Contract.TestBlacklist(&_Address.TransactOpts, _addr)
}

// TestCheckSender is a paid mutator transaction binding the contract method 0x6c2dd5fd.
//
// Solidity: function testCheckSender() returns()
func (_Address *AddressTransactor) TestCheckSender(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "testCheckSender")
}

// TestCheckSender is a paid mutator transaction binding the contract method 0x6c2dd5fd.
//
// Solidity: function testCheckSender() returns()
func (_Address *AddressSession) TestCheckSender() (*types.Transaction, error) {
	return _Address.Contract.TestCheckSender(&_Address.TransactOpts)
}

// TestCheckSender is a paid mutator transaction binding the contract method 0x6c2dd5fd.
//
// Solidity: function testCheckSender() returns()
func (_Address *AddressTransactorSession) TestCheckSender() (*types.Transaction, error) {
	return _Address.Contract.TestCheckSender(&_Address.TransactOpts)
}

// TestCodeHash is a paid mutator transaction binding the contract method 0x0bf3051d.
//
// Solidity: function testCodeHash(address _addr) returns()
func (_Address *AddressTransactor) TestCodeHash(opts *bind.TransactOpts, _addr common.Address) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "testCodeHash", _addr)
}

// TestCodeHash is a paid mutator transaction binding the contract method 0x0bf3051d.
//
// Solidity: function testCodeHash(address _addr) returns()
func (_Address *AddressSession) TestCodeHash(_addr common.Address) (*types.Transaction, error) {
	return _Address.Contract.TestCodeHash(&_Address.TransactOpts, _addr)
}

// TestCodeHash is a paid mutator transaction binding the contract method 0x0bf3051d.
//
// Solidity: function testCodeHash(address _addr) returns()
func (_Address *AddressTransactorSession) TestCodeHash(_addr common.Address) (*types.Transaction, error) {
	return _Address.Contract.TestCodeHash(&_Address.TransactOpts, _addr)
}

// TestDelegateCall is a paid mutator transaction binding the contract method 0x8083cd72.
//
// Solidity: function testDelegateCall(uint256 _number) returns()
func (_Address *AddressTransactor) TestDelegateCall(opts *bind.TransactOpts, _number *big.Int) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "testDelegateCall", _number)
}

// TestDelegateCall is a paid mutator transaction binding the contract method 0x8083cd72.
//
// Solidity: function testDelegateCall(uint256 _number) returns()
func (_Address *AddressSession) TestDelegateCall(_number *big.Int) (*types.Transaction, error) {
	return _Address.Contract.TestDelegateCall(&_Address.TransactOpts, _number)
}

// TestDelegateCall is a paid mutator transaction binding the contract method 0x8083cd72.
//
// Solidity: function testDelegateCall(uint256 _number) returns()
func (_Address *AddressTransactorSession) TestDelegateCall(_number *big.Int) (*types.Transaction, error) {
	return _Address.Contract.TestDelegateCall(&_Address.TransactOpts, _number)
}

// TestDeployNewContract is a paid mutator transaction binding the contract method 0x5418a61f.
//
// Solidity: function testDeployNewContract(uint256 _value) returns()
func (_Address *AddressTransactor) TestDeployNewContract(opts *bind.TransactOpts, _value *big.Int) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "testDeployNewContract", _value)
}

// TestDeployNewContract is a paid mutator transaction binding the contract method 0x5418a61f.
//
// Solidity: function testDeployNewContract(uint256 _value) returns()
func (_Address *AddressSession) TestDeployNewContract(_value *big.Int) (*types.Transaction, error) {
	return _Address.Contract.TestDeployNewContract(&_Address.TransactOpts, _value)
}

// TestDeployNewContract is a paid mutator transaction binding the contract method 0x5418a61f.
//
// Solidity: function testDeployNewContract(uint256 _value) returns()
func (_Address *AddressTransactorSession) TestDeployNewContract(_value *big.Int) (*types.Transaction, error) {
	return _Address.Contract.TestDeployNewContract(&_Address.TransactOpts, _value)
}

// TestGetDeployedContract is a paid mutator transaction binding the contract method 0x83fd7119.
//
// Solidity: function testGetDeployedContract(uint256 index) returns()
func (_Address *AddressTransactor) TestGetDeployedContract(opts *bind.TransactOpts, index *big.Int) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "testGetDeployedContract", index)
}

// TestGetDeployedContract is a paid mutator transaction binding the contract method 0x83fd7119.
//
// Solidity: function testGetDeployedContract(uint256 index) returns()
func (_Address *AddressSession) TestGetDeployedContract(index *big.Int) (*types.Transaction, error) {
	return _Address.Contract.TestGetDeployedContract(&_Address.TransactOpts, index)
}

// TestGetDeployedContract is a paid mutator transaction binding the contract method 0x83fd7119.
//
// Solidity: function testGetDeployedContract(uint256 index) returns()
func (_Address *AddressTransactorSession) TestGetDeployedContract(index *big.Int) (*types.Transaction, error) {
	return _Address.Contract.TestGetDeployedContract(&_Address.TransactOpts, index)
}

// TestGetDeployedContractsCount is a paid mutator transaction binding the contract method 0x8c46d391.
//
// Solidity: function testGetDeployedContractsCount() returns()
func (_Address *AddressTransactor) TestGetDeployedContractsCount(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "testGetDeployedContractsCount")
}

// TestGetDeployedContractsCount is a paid mutator transaction binding the contract method 0x8c46d391.
//
// Solidity: function testGetDeployedContractsCount() returns()
func (_Address *AddressSession) TestGetDeployedContractsCount() (*types.Transaction, error) {
	return _Address.Contract.TestGetDeployedContractsCount(&_Address.TransactOpts)
}

// TestGetDeployedContractsCount is a paid mutator transaction binding the contract method 0x8c46d391.
//
// Solidity: function testGetDeployedContractsCount() returns()
func (_Address *AddressTransactorSession) TestGetDeployedContractsCount() (*types.Transaction, error) {
	return _Address.Contract.TestGetDeployedContractsCount(&_Address.TransactOpts)
}

// TestLogAddress is a paid mutator transaction binding the contract method 0x5eda713a.
//
// Solidity: function testLogAddress(address _addr) returns()
func (_Address *AddressTransactor) TestLogAddress(opts *bind.TransactOpts, _addr common.Address) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "testLogAddress", _addr)
}

// TestLogAddress is a paid mutator transaction binding the contract method 0x5eda713a.
//
// Solidity: function testLogAddress(address _addr) returns()
func (_Address *AddressSession) TestLogAddress(_addr common.Address) (*types.Transaction, error) {
	return _Address.Contract.TestLogAddress(&_Address.TransactOpts, _addr)
}

// TestLogAddress is a paid mutator transaction binding the contract method 0x5eda713a.
//
// Solidity: function testLogAddress(address _addr) returns()
func (_Address *AddressTransactorSession) TestLogAddress(_addr common.Address) (*types.Transaction, error) {
	return _Address.Contract.TestLogAddress(&_Address.TransactOpts, _addr)
}

// TestNestedMapping is a paid mutator transaction binding the contract method 0x7252ac99.
//
// Solidity: function testNestedMapping(address _addr, string key, uint256 value) returns(bool)
func (_Address *AddressTransactor) TestNestedMapping(opts *bind.TransactOpts, _addr common.Address, key string, value *big.Int) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "testNestedMapping", _addr, key, value)
}

// TestNestedMapping is a paid mutator transaction binding the contract method 0x7252ac99.
//
// Solidity: function testNestedMapping(address _addr, string key, uint256 value) returns(bool)
func (_Address *AddressSession) TestNestedMapping(_addr common.Address, key string, value *big.Int) (*types.Transaction, error) {
	return _Address.Contract.TestNestedMapping(&_Address.TransactOpts, _addr, key, value)
}

// TestNestedMapping is a paid mutator transaction binding the contract method 0x7252ac99.
//
// Solidity: function testNestedMapping(address _addr, string key, uint256 value) returns(bool)
func (_Address *AddressTransactorSession) TestNestedMapping(_addr common.Address, key string, value *big.Int) (*types.Transaction, error) {
	return _Address.Contract.TestNestedMapping(&_Address.TransactOpts, _addr, key, value)
}

// TestSendEther is a paid mutator transaction binding the contract method 0x178dd34b.
//
// Solidity: function testSendEther(uint256 _amount) returns()
func (_Address *AddressTransactor) TestSendEther(opts *bind.TransactOpts, _amount *big.Int) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "testSendEther", _amount)
}

// TestSendEther is a paid mutator transaction binding the contract method 0x178dd34b.
//
// Solidity: function testSendEther(uint256 _amount) returns()
func (_Address *AddressSession) TestSendEther(_amount *big.Int) (*types.Transaction, error) {
	return _Address.Contract.TestSendEther(&_Address.TransactOpts, _amount)
}

// TestSendEther is a paid mutator transaction binding the contract method 0x178dd34b.
//
// Solidity: function testSendEther(uint256 _amount) returns()
func (_Address *AddressTransactorSession) TestSendEther(_amount *big.Int) (*types.Transaction, error) {
	return _Address.Contract.TestSendEther(&_Address.TransactOpts, _amount)
}

// TestSetAndCheckOwner is a paid mutator transaction binding the contract method 0x57ddc7a2.
//
// Solidity: function testSetAndCheckOwner(address _newOwner) returns(address)
func (_Address *AddressTransactor) TestSetAndCheckOwner(opts *bind.TransactOpts, _newOwner common.Address) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "testSetAndCheckOwner", _newOwner)
}

// TestSetAndCheckOwner is a paid mutator transaction binding the contract method 0x57ddc7a2.
//
// Solidity: function testSetAndCheckOwner(address _newOwner) returns(address)
func (_Address *AddressSession) TestSetAndCheckOwner(_newOwner common.Address) (*types.Transaction, error) {
	return _Address.Contract.TestSetAndCheckOwner(&_Address.TransactOpts, _newOwner)
}

// TestSetAndCheckOwner is a paid mutator transaction binding the contract method 0x57ddc7a2.
//
// Solidity: function testSetAndCheckOwner(address _newOwner) returns(address)
func (_Address *AddressTransactorSession) TestSetAndCheckOwner(_newOwner common.Address) (*types.Transaction, error) {
	return _Address.Contract.TestSetAndCheckOwner(&_Address.TransactOpts, _newOwner)
}

// TestSimpleStruct is a paid mutator transaction binding the contract method 0x4ac0d733.
//
// Solidity: function testSimpleStruct(address _addr, uint256 data1, uint256 data2) returns(bool)
func (_Address *AddressTransactor) TestSimpleStruct(opts *bind.TransactOpts, _addr common.Address, data1 *big.Int, data2 *big.Int) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "testSimpleStruct", _addr, data1, data2)
}

// TestSimpleStruct is a paid mutator transaction binding the contract method 0x4ac0d733.
//
// Solidity: function testSimpleStruct(address _addr, uint256 data1, uint256 data2) returns(bool)
func (_Address *AddressSession) TestSimpleStruct(_addr common.Address, data1 *big.Int, data2 *big.Int) (*types.Transaction, error) {
	return _Address.Contract.TestSimpleStruct(&_Address.TransactOpts, _addr, data1, data2)
}

// TestSimpleStruct is a paid mutator transaction binding the contract method 0x4ac0d733.
//
// Solidity: function testSimpleStruct(address _addr, uint256 data1, uint256 data2) returns(bool)
func (_Address *AddressTransactorSession) TestSimpleStruct(_addr common.Address, data1 *big.Int, data2 *big.Int) (*types.Transaction, error) {
	return _Address.Contract.TestSimpleStruct(&_Address.TransactOpts, _addr, data1, data2)
}

// TestUniqueAddress is a paid mutator transaction binding the contract method 0xfa066621.
//
// Solidity: function testUniqueAddress(address _addr) returns(uint256)
func (_Address *AddressTransactor) TestUniqueAddress(opts *bind.TransactOpts, _addr common.Address) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "testUniqueAddress", _addr)
}

// TestUniqueAddress is a paid mutator transaction binding the contract method 0xfa066621.
//
// Solidity: function testUniqueAddress(address _addr) returns(uint256)
func (_Address *AddressSession) TestUniqueAddress(_addr common.Address) (*types.Transaction, error) {
	return _Address.Contract.TestUniqueAddress(&_Address.TransactOpts, _addr)
}

// TestUniqueAddress is a paid mutator transaction binding the contract method 0xfa066621.
//
// Solidity: function testUniqueAddress(address _addr) returns(uint256)
func (_Address *AddressTransactorSession) TestUniqueAddress(_addr common.Address) (*types.Transaction, error) {
	return _Address.Contract.TestUniqueAddress(&_Address.TransactOpts, _addr)
}

// TestWhitelist is a paid mutator transaction binding the contract method 0x1addb339.
//
// Solidity: function testWhitelist(address _addr) returns(bool)
func (_Address *AddressTransactor) TestWhitelist(opts *bind.TransactOpts, _addr common.Address) (*types.Transaction, error) {
	return _Address.contract.Transact(opts, "testWhitelist", _addr)
}

// TestWhitelist is a paid mutator transaction binding the contract method 0x1addb339.
//
// Solidity: function testWhitelist(address _addr) returns(bool)
func (_Address *AddressSession) TestWhitelist(_addr common.Address) (*types.Transaction, error) {
	return _Address.Contract.TestWhitelist(&_Address.TransactOpts, _addr)
}

// TestWhitelist is a paid mutator transaction binding the contract method 0x1addb339.
//
// Solidity: function testWhitelist(address _addr) returns(bool)
func (_Address *AddressTransactorSession) TestWhitelist(_addr common.Address) (*types.Transaction, error) {
	return _Address.Contract.TestWhitelist(&_Address.TransactOpts, _addr)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Address *AddressTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Address.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Address *AddressSession) Receive() (*types.Transaction, error) {
	return _Address.Contract.Receive(&_Address.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Address *AddressTransactorSession) Receive() (*types.Transaction, error) {
	return _Address.Contract.Receive(&_Address.TransactOpts)
}

// AddressContractBalancesIterator is returned from FilterContractBalances and is used to iterate over the raw logs and unpacked data for ContractBalances events raised by the Address contract.
type AddressContractBalancesIterator struct {
	Event *AddressContractBalances // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AddressContractBalancesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AddressContractBalances)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AddressContractBalances)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AddressContractBalancesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AddressContractBalancesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AddressContractBalances represents a ContractBalances event raised by the Address contract.
type AddressContractBalances struct {
	Step           string
	CheckerBalance *big.Int
	TesterBalance  *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterContractBalances is a free log retrieval operation binding the contract event 0x00494e7c4dab1532eb8dcec5bfad9d4979e7c3dca2f49209e065c10bedd7443d.
//
// Solidity: event ContractBalances(string step, uint256 checkerBalance, uint256 testerBalance)
func (_Address *AddressFilterer) FilterContractBalances(opts *bind.FilterOpts) (*AddressContractBalancesIterator, error) {

	logs, sub, err := _Address.contract.FilterLogs(opts, "ContractBalances")
	if err != nil {
		return nil, err
	}
	return &AddressContractBalancesIterator{contract: _Address.contract, event: "ContractBalances", logs: logs, sub: sub}, nil
}

// WatchContractBalances is a free log subscription operation binding the contract event 0x00494e7c4dab1532eb8dcec5bfad9d4979e7c3dca2f49209e065c10bedd7443d.
//
// Solidity: event ContractBalances(string step, uint256 checkerBalance, uint256 testerBalance)
func (_Address *AddressFilterer) WatchContractBalances(opts *bind.WatchOpts, sink chan<- *AddressContractBalances) (event.Subscription, error) {

	logs, sub, err := _Address.contract.WatchLogs(opts, "ContractBalances")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AddressContractBalances)
				if err := _Address.contract.UnpackLog(event, "ContractBalances", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContractBalances is a log parse operation binding the contract event 0x00494e7c4dab1532eb8dcec5bfad9d4979e7c3dca2f49209e065c10bedd7443d.
//
// Solidity: event ContractBalances(string step, uint256 checkerBalance, uint256 testerBalance)
func (_Address *AddressFilterer) ParseContractBalances(log types.Log) (*AddressContractBalances, error) {
	event := new(AddressContractBalances)
	if err := _Address.contract.UnpackLog(event, "ContractBalances", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AddressDelegateCallExecutedIterator is returned from FilterDelegateCallExecuted and is used to iterate over the raw logs and unpacked data for DelegateCallExecuted events raised by the Address contract.
type AddressDelegateCallExecutedIterator struct {
	Event *AddressDelegateCallExecuted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AddressDelegateCallExecutedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AddressDelegateCallExecuted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AddressDelegateCallExecuted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AddressDelegateCallExecutedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AddressDelegateCallExecutedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AddressDelegateCallExecuted represents a DelegateCallExecuted event raised by the Address contract.
type AddressDelegateCallExecuted struct {
	Caller   common.Address
	NewValue *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterDelegateCallExecuted is a free log retrieval operation binding the contract event 0x53d3a45b4f407191100b855ab09b34d1ea01668a1429d379fc2e3a667015fb98.
//
// Solidity: event DelegateCallExecuted(address indexed caller, uint256 newValue)
func (_Address *AddressFilterer) FilterDelegateCallExecuted(opts *bind.FilterOpts, caller []common.Address) (*AddressDelegateCallExecutedIterator, error) {

	var callerRule []interface{}
	for _, callerItem := range caller {
		callerRule = append(callerRule, callerItem)
	}

	logs, sub, err := _Address.contract.FilterLogs(opts, "DelegateCallExecuted", callerRule)
	if err != nil {
		return nil, err
	}
	return &AddressDelegateCallExecutedIterator{contract: _Address.contract, event: "DelegateCallExecuted", logs: logs, sub: sub}, nil
}

// WatchDelegateCallExecuted is a free log subscription operation binding the contract event 0x53d3a45b4f407191100b855ab09b34d1ea01668a1429d379fc2e3a667015fb98.
//
// Solidity: event DelegateCallExecuted(address indexed caller, uint256 newValue)
func (_Address *AddressFilterer) WatchDelegateCallExecuted(opts *bind.WatchOpts, sink chan<- *AddressDelegateCallExecuted, caller []common.Address) (event.Subscription, error) {

	var callerRule []interface{}
	for _, callerItem := range caller {
		callerRule = append(callerRule, callerItem)
	}

	logs, sub, err := _Address.contract.WatchLogs(opts, "DelegateCallExecuted", callerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AddressDelegateCallExecuted)
				if err := _Address.contract.UnpackLog(event, "DelegateCallExecuted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateCallExecuted is a log parse operation binding the contract event 0x53d3a45b4f407191100b855ab09b34d1ea01668a1429d379fc2e3a667015fb98.
//
// Solidity: event DelegateCallExecuted(address indexed caller, uint256 newValue)
func (_Address *AddressFilterer) ParseDelegateCallExecuted(log types.Log) (*AddressDelegateCallExecuted, error) {
	event := new(AddressDelegateCallExecuted)
	if err := _Address.contract.UnpackLog(event, "DelegateCallExecuted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AddressDeployedContractAddressIterator is returned from FilterDeployedContractAddress and is used to iterate over the raw logs and unpacked data for DeployedContractAddress events raised by the Address contract.
type AddressDeployedContractAddressIterator struct {
	Event *AddressDeployedContractAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AddressDeployedContractAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AddressDeployedContractAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AddressDeployedContractAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AddressDeployedContractAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AddressDeployedContractAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AddressDeployedContractAddress represents a DeployedContractAddress event raised by the Address contract.
type AddressDeployedContractAddress struct {
	Index           *big.Int
	ContractAddress common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterDeployedContractAddress is a free log retrieval operation binding the contract event 0xc60171353e00c574bca7a08d6842627b00d33955f090302a6b66ea22b32392c3.
//
// Solidity: event DeployedContractAddress(uint256 index, address contractAddress)
func (_Address *AddressFilterer) FilterDeployedContractAddress(opts *bind.FilterOpts) (*AddressDeployedContractAddressIterator, error) {

	logs, sub, err := _Address.contract.FilterLogs(opts, "DeployedContractAddress")
	if err != nil {
		return nil, err
	}
	return &AddressDeployedContractAddressIterator{contract: _Address.contract, event: "DeployedContractAddress", logs: logs, sub: sub}, nil
}

// WatchDeployedContractAddress is a free log subscription operation binding the contract event 0xc60171353e00c574bca7a08d6842627b00d33955f090302a6b66ea22b32392c3.
//
// Solidity: event DeployedContractAddress(uint256 index, address contractAddress)
func (_Address *AddressFilterer) WatchDeployedContractAddress(opts *bind.WatchOpts, sink chan<- *AddressDeployedContractAddress) (event.Subscription, error) {

	logs, sub, err := _Address.contract.WatchLogs(opts, "DeployedContractAddress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AddressDeployedContractAddress)
				if err := _Address.contract.UnpackLog(event, "DeployedContractAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeployedContractAddress is a log parse operation binding the contract event 0xc60171353e00c574bca7a08d6842627b00d33955f090302a6b66ea22b32392c3.
//
// Solidity: event DeployedContractAddress(uint256 index, address contractAddress)
func (_Address *AddressFilterer) ParseDeployedContractAddress(log types.Log) (*AddressDeployedContractAddress, error) {
	event := new(AddressDeployedContractAddress)
	if err := _Address.contract.UnpackLog(event, "DeployedContractAddress", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AddressDeployedContractsCountIterator is returned from FilterDeployedContractsCount and is used to iterate over the raw logs and unpacked data for DeployedContractsCount events raised by the Address contract.
type AddressDeployedContractsCountIterator struct {
	Event *AddressDeployedContractsCount // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AddressDeployedContractsCountIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AddressDeployedContractsCount)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AddressDeployedContractsCount)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AddressDeployedContractsCountIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AddressDeployedContractsCountIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AddressDeployedContractsCount represents a DeployedContractsCount event raised by the Address contract.
type AddressDeployedContractsCount struct {
	Count *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterDeployedContractsCount is a free log retrieval operation binding the contract event 0x449eadc90283bbfaf710e4c1a174677bd307cbdae64eb8f02c7ed34760a8c185.
//
// Solidity: event DeployedContractsCount(uint256 count)
func (_Address *AddressFilterer) FilterDeployedContractsCount(opts *bind.FilterOpts) (*AddressDeployedContractsCountIterator, error) {

	logs, sub, err := _Address.contract.FilterLogs(opts, "DeployedContractsCount")
	if err != nil {
		return nil, err
	}
	return &AddressDeployedContractsCountIterator{contract: _Address.contract, event: "DeployedContractsCount", logs: logs, sub: sub}, nil
}

// WatchDeployedContractsCount is a free log subscription operation binding the contract event 0x449eadc90283bbfaf710e4c1a174677bd307cbdae64eb8f02c7ed34760a8c185.
//
// Solidity: event DeployedContractsCount(uint256 count)
func (_Address *AddressFilterer) WatchDeployedContractsCount(opts *bind.WatchOpts, sink chan<- *AddressDeployedContractsCount) (event.Subscription, error) {

	logs, sub, err := _Address.contract.WatchLogs(opts, "DeployedContractsCount")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AddressDeployedContractsCount)
				if err := _Address.contract.UnpackLog(event, "DeployedContractsCount", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeployedContractsCount is a log parse operation binding the contract event 0x449eadc90283bbfaf710e4c1a174677bd307cbdae64eb8f02c7ed34760a8c185.
//
// Solidity: event DeployedContractsCount(uint256 count)
func (_Address *AddressFilterer) ParseDeployedContractsCount(log types.Log) (*AddressDeployedContractsCount, error) {
	event := new(AddressDeployedContractsCount)
	if err := _Address.contract.UnpackLog(event, "DeployedContractsCount", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AddressSenderVerifiedIterator is returned from FilterSenderVerified and is used to iterate over the raw logs and unpacked data for SenderVerified events raised by the Address contract.
type AddressSenderVerifiedIterator struct {
	Event *AddressSenderVerified // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AddressSenderVerifiedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AddressSenderVerified)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AddressSenderVerified)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AddressSenderVerifiedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AddressSenderVerifiedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AddressSenderVerified represents a SenderVerified event raised by the Address contract.
type AddressSenderVerified struct {
	Sender common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSenderVerified is a free log retrieval operation binding the contract event 0xb7dd7e5499cc80c9e84312f64339a5b8f6a9b544849cb8fe6ef9b52e0d470f01.
//
// Solidity: event SenderVerified(address indexed sender)
func (_Address *AddressFilterer) FilterSenderVerified(opts *bind.FilterOpts, sender []common.Address) (*AddressSenderVerifiedIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Address.contract.FilterLogs(opts, "SenderVerified", senderRule)
	if err != nil {
		return nil, err
	}
	return &AddressSenderVerifiedIterator{contract: _Address.contract, event: "SenderVerified", logs: logs, sub: sub}, nil
}

// WatchSenderVerified is a free log subscription operation binding the contract event 0xb7dd7e5499cc80c9e84312f64339a5b8f6a9b544849cb8fe6ef9b52e0d470f01.
//
// Solidity: event SenderVerified(address indexed sender)
func (_Address *AddressFilterer) WatchSenderVerified(opts *bind.WatchOpts, sink chan<- *AddressSenderVerified, sender []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Address.contract.WatchLogs(opts, "SenderVerified", senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AddressSenderVerified)
				if err := _Address.contract.UnpackLog(event, "SenderVerified", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSenderVerified is a log parse operation binding the contract event 0xb7dd7e5499cc80c9e84312f64339a5b8f6a9b544849cb8fe6ef9b52e0d470f01.
//
// Solidity: event SenderVerified(address indexed sender)
func (_Address *AddressFilterer) ParseSenderVerified(log types.Log) (*AddressSenderVerified, error) {
	event := new(AddressSenderVerified)
	if err := _Address.contract.UnpackLog(event, "SenderVerified", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AddressTestCompletedIterator is returned from FilterTestCompleted and is used to iterate over the raw logs and unpacked data for TestCompleted events raised by the Address contract.
type AddressTestCompletedIterator struct {
	Event *AddressTestCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AddressTestCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AddressTestCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AddressTestCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AddressTestCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AddressTestCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AddressTestCompleted represents a TestCompleted event raised by the Address contract.
type AddressTestCompleted struct {
	TestName string
	Message  string
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTestCompleted is a free log retrieval operation binding the contract event 0x48e71b6d9e8347b669c55322c62efbefc185466e9ce7e1a8e48d38055ccf6720.
//
// Solidity: event TestCompleted(string testName, string message)
func (_Address *AddressFilterer) FilterTestCompleted(opts *bind.FilterOpts) (*AddressTestCompletedIterator, error) {

	logs, sub, err := _Address.contract.FilterLogs(opts, "TestCompleted")
	if err != nil {
		return nil, err
	}
	return &AddressTestCompletedIterator{contract: _Address.contract, event: "TestCompleted", logs: logs, sub: sub}, nil
}

// WatchTestCompleted is a free log subscription operation binding the contract event 0x48e71b6d9e8347b669c55322c62efbefc185466e9ce7e1a8e48d38055ccf6720.
//
// Solidity: event TestCompleted(string testName, string message)
func (_Address *AddressFilterer) WatchTestCompleted(opts *bind.WatchOpts, sink chan<- *AddressTestCompleted) (event.Subscription, error) {

	logs, sub, err := _Address.contract.WatchLogs(opts, "TestCompleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AddressTestCompleted)
				if err := _Address.contract.UnpackLog(event, "TestCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTestCompleted is a log parse operation binding the contract event 0x48e71b6d9e8347b669c55322c62efbefc185466e9ce7e1a8e48d38055ccf6720.
//
// Solidity: event TestCompleted(string testName, string message)
func (_Address *AddressFilterer) ParseTestCompleted(log types.Log) (*AddressTestCompleted, error) {
	event := new(AddressTestCompleted)
	if err := _Address.contract.UnpackLog(event, "TestCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
