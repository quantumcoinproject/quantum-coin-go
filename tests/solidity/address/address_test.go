package address

import (
	"crypto/rand"
	"errors"
	"fmt"
	"github.com/QuantumCoinProject/qc/accounts/abi"
	"github.com/QuantumCoinProject/qc/common"
	"github.com/QuantumCoinProject/qc/common/hexutil"
	"github.com/QuantumCoinProject/qc/consensus"
	"github.com/QuantumCoinProject/qc/consensus/mockconsensus"
	"github.com/QuantumCoinProject/qc/core"
	"github.com/QuantumCoinProject/qc/core/rawdb"
	"github.com/QuantumCoinProject/qc/core/state"
	"github.com/QuantumCoinProject/qc/core/types"
	"github.com/QuantumCoinProject/qc/core/vm"
	"github.com/QuantumCoinProject/qc/internal/ethapi"
	"github.com/QuantumCoinProject/qc/log"
	"github.com/QuantumCoinProject/qc/params"
	"github.com/QuantumCoinProject/qc/tests/solidity/address/simple"
	"math"
	"math/big"
	"strconv"
	"strings"
	"testing"
)

/*
1) solc --bin --bin-runtime --abi c:\github\quantum-coin-go\tests\solidity\address\runner.sol  -o c:\github\quantum-coin-go\tests\solidity\address
3) Copy contents of AddressChecker.bin-runtime into AddressCheckerBin variable below
4) Copy contents of Runner.bin-runtime into RunnerBin variable below
5) abigen --bin=c:\github\quantum-coin-go\tests\solidity\address\Runner.bin --abi=c:\github\quantum-coin-go\tests\solidity\address\Runner.abi --pkg=address --out=c:\github\quantum-coin-go\tests\solidity\address\runner.go

6) solc --bin --bin-runtime --abi c:\github\quantum-coin-go\tests\solidity\address\simple\simple.sol  -o c:\github\quantum-coin-go\tests\solidity\address\simple  --asm --ir
7) Copy contents of Simple.bin-runtime into SimpleBin variable below
8) abigen --bin=c:\github\quantum-coin-go\tests\solidity\address\simple\Simple.bin --abi=c:\github\quantum-coin-go\tests\solidity\address\simple\Simple.abi --pkg=simple --out=c:\github\quantum-coin-go\tests\solidity\address\simple\simple.go
*/

const AddressCheckerBin = ""
const RunnerBin = ""
const SimpleBin = "6080604052348015600f57600080fd5b506004361060285760003560e01c806338cc483114602d575b600080fd5b60336049565b6040518082815260200191505060405180910390f35b6000805490509056fea26469706673582212208a04538509eaf82efcd4b55f78e0e7e68ffd6df932764be9f9c2a51e73a5b7c764736f6c637827302e372e362d646576656c6f702e323032352e322e32312b636f6d6d69742e66353035316436350058"
const GENESIS_BLOCK_HASH = "0x2c8127f13d50434052128a88c9c9f79a27d44a1145e51f6fd250b6e247369e99"

var addressCheckerContractAddress = common.HexToAddress("0x0000000000000000000000000000000000000000000000000000000000003000")
var runnerContractAddress = common.HexToAddress("0x0000000000000000000000000000000000000000000000000000000000004000")
var messageSenderAddress = common.HexToAddress("0x0000000000000000000000000000000000000000000000000000000000005000")

var testAddress1 = common.RandomAddress()
var testAddress2 = common.RandomAddress()

func newSimpleStateDb() *state.StateDB {
	statedb, _ := state.New(common.Hash{}, state.NewDatabase(rawdb.NewMemoryDatabase()), nil)

	statedb.CreateAccount(runnerContractAddress)
	statedb.SetCode(runnerContractAddress, common.FromHex(SimpleBin))

	for i := 0; i <= 9999999; i++ {
		statedb.AddBalance(runnerContractAddress, big.NewInt(9000000000000000000))
		//statedb.AddBalance(runnerContractAddress, big.NewInt(9000000000000000000))
		//statedb.AddBalance(messageSenderAddress, big.NewInt(9000000000000000000))
	}

	statedb.Finalise(true) // Push the state into the "original" slot

	return statedb
}

func newStateDb() *state.StateDB {
	statedb, _ := state.New(common.Hash{}, state.NewDatabase(rawdb.NewMemoryDatabase()), nil)

	statedb.CreateAccount(addressCheckerContractAddress)
	statedb.SetCode(addressCheckerContractAddress, common.FromHex(AddressCheckerBin))

	statedb.CreateAccount(runnerContractAddress)
	statedb.SetCode(runnerContractAddress, common.FromHex(RunnerBin))

	for i := 0; i <= 9999999; i++ {
		statedb.AddBalance(addressCheckerContractAddress, big.NewInt(9000000000000000000))
		//statedb.AddBalance(runnerContractAddress, big.NewInt(9000000000000000000))
		//statedb.AddBalance(messageSenderAddress, big.NewInt(9000000000000000000))
	}

	statedb.Finalise(true) // Push the state into the "original" slot

	return statedb
}

// largeNumber returns a very large big.Int.
func largeNumber(megabytes int) *big.Int {
	buf := make([]byte, megabytes*1024*1024)
	rand.Read(buf)
	bigint := new(big.Int)
	bigint.SetBytes(buf)
	return bigint
}

type TestChainContext struct {
	Eng consensus.Engine
}

func (tcc *TestChainContext) Engine() consensus.Engine {
	return tcc.Eng
}

func (tcc *TestChainContext) GetHeader(lastKnownHash common.Hash, lastKnownNumber uint64) *types.Header {
	hash := common.BytesToHash([]byte(strconv.FormatUint(lastKnownNumber+1, 10)))
	blockNumber := big.NewInt(int64(lastKnownNumber + 1))

	header := &types.Header{
		MixDigest:   hash,
		ReceiptHash: hash,
		TxHash:      hash,
		Nonce:       types.BlockNonce{},
		Extra:       []byte{},
		Bloom:       types.Bloom{},
		GasUsed:     0,
		Coinbase:    common.Address{},
		GasLimit:    0,
		Time:        1337,
		ParentHash:  lastKnownHash,
		Root:        hash,
		Number:      blockNumber,
		Difficulty:  largeNumber(2),
	}

	return header
}

var chainConfig = &params.ChainConfig{
	ChainID:             big.NewInt(1),
	HomesteadBlock:      new(big.Int),
	EIP155Block:         new(big.Int),
	EIP150Block:         new(big.Int),
	EIP158Block:         new(big.Int),
	ByzantiumBlock:      new(big.Int),
	ConstantinopleBlock: new(big.Int),
	PetersburgBlock:     new(big.Int),
	IstanbulBlock:       new(big.Int),
	BerlinBlock:         new(big.Int),
	LondonBlock:         new(big.Int),
}

var engine = mockconsensus.New(chainConfig, nil, common.HexToHash(GENESIS_BLOCK_HASH))

var tcc = &TestChainContext{Eng: engine}

func execute(tcc *TestChainContext, data []byte, from common.Address, state *state.StateDB, header *types.Header, value *big.Int) (hexutil.Bytes, error) {
	msgData := (hexutil.Bytes)(data)

	args := ethapi.TransactionArgs{
		From:  &from,
		To:    &runnerContractAddress,
		Data:  &msgData,
		Value: (*hexutil.Big)(value),
	}

	msg, err := args.ToMessage(math.MaxUint64)
	if err != nil {
		return nil, err
	}

	vmError := func() error { return nil }
	vmConfig := &vm.Config{OverrideGasFailure: true}

	txContext := core.NewEVMTxContext(msg)
	context := core.NewEVMBlockContext(header, tcc, nil)
	evm := vm.NewEVM(context, txContext, state, chainConfig, *vmConfig)

	gp := new(core.GasPool).AddGas(math.MaxUint64)
	result, err := core.ApplyMessage(evm, msg, gp)
	if err != nil {
		return nil, err
	}

	if err = vmError(); err != nil {
		return nil, err
	}

	if result == nil {
		return nil, errors.New("result is nil")
	}

	// If the result contains a revert reason, try to unpack and return it.
	if len(result.Revert()) > 0 {
		return nil, core.NewRevertError(result)
	}
	return result.Return(), result.Err
}

func encodeCall(abi *abi.ABI, method string, args ...interface{}) ([]byte, error) {
	return abi.Pack(method, args...)
}

func GetRunner_ABI() (abi.ABI, error) {
	s := AddressMetaData.ABI
	abi, err := abi.JSON(strings.NewReader(s))
	return abi, err
}

func GetSimple_ABI() (abi.ABI, error) {
	s := simple.AddressMetaData.ABI
	abi, err := abi.JSON(strings.NewReader(s))
	return abi, err
}

func runAllTestsWithDefaultAddress(state *state.StateDB) error {
	method := "runAllTestsWithDefaultAddress"
	abiData, err := GetRunner_ABI()
	if err != nil {
		log.Error("runAllTestsWithDefaultAddress abi error", "err", err)
		return err
	}
	// call
	data, err := encodeCall(&abiData, method, addressCheckerContractAddress)
	if err != nil {
		log.Error("Unable to pack runAllTestsWithDefaultAddress", "error", err)
		return err
	}

	header := tcc.GetHeader(common.ZERO_HASH, uint64(1))

	_, err = execute(tcc, data, messageSenderAddress, state, header, new(big.Int))
	if err != nil {
		log.Error("Unable to execute", "error", err)
		return err
	}

	return nil
}

func getAddressTest(state *state.StateDB) error {
	method := "getAddress"
	abiData, err := GetSimple_ABI()
	if err != nil {
		log.Error("getAddressTest abi error", "err", err)
		return err
	}
	// call
	data, err := encodeCall(&abiData, method)
	if err != nil {
		log.Error("Unable to pack getAddressTest", "error", err)
		return err
	}

	header := tcc.GetHeader(common.ZERO_HASH, uint64(1))

	result, err := execute(tcc, data, messageSenderAddress, state, header, new(big.Int))
	if err != nil {
		log.Error("Unable to execute", "error", err)
		return err
	}

	if len(result) == 0 {
		return errors.New("getAddressTest result is 0")
	}

	var (
		outAddr = new(common.Address)
	)

	if err = abiData.UnpackIntoInterface(&outAddr, method, result); err != nil {
		log.Error("getAddressTest UnpackIntoInterface", "err", err, "address", outAddr)
	}

	expectedAddr := common.HexToAddress("0xa000000000000000000000000000000000000000000000000000000000001000")
	if expectedAddr.IsEqualTo(*outAddr) == false {
		fmt.Println("getAddressTest", "expected", expectedAddr, "got", *outAddr)
		return errors.New("unexpected address")
	}

	return nil
}

func getInputAddressTest(state *state.StateDB, expectedAddr common.Address) error {
	method := "getInputAddress"
	abiData, err := GetRunner_ABI()
	if err != nil {
		log.Error("getInputAddressTest abi error", "err", err)
		return err
	}
	// call
	data, err := encodeCall(&abiData, method, expectedAddr)
	if err != nil {
		log.Error("Unable to pack getInputAddressTest", "error", err)
		return err
	}

	header := tcc.GetHeader(common.ZERO_HASH, uint64(1))

	result, err := execute(tcc, data, messageSenderAddress, state, header, new(big.Int))
	if err != nil {
		log.Error("Unable to execute", "error", err)
		return err
	}

	if len(result) == 0 {
		return errors.New("getInputAddressTest result is 0")
	}

	var (
		outAddr = new(common.Address)
	)

	if err = abiData.UnpackIntoInterface(&outAddr, method, result); err != nil {
		log.Error("getInputAddressTest UnpackIntoInterface", "err", err, "address", outAddr)
	}

	if expectedAddr.IsEqualTo(*outAddr) == false {
		fmt.Println("getInputAddressTest", "expected", expectedAddr, "got", *outAddr)
		return errors.New("unexpected address")
	}

	return nil
}

func runAllTests(state *state.StateDB, method string) error {
	abiData, err := GetRunner_ABI()
	if err != nil {
		log.Error("runAllTests abi error", "err", err)
		return err
	}
	// call
	data, err := encodeCall(&abiData, method, addressCheckerContractAddress, testAddress1, testAddress2)
	if err != nil {
		log.Error("Unable to pack runAllTests", "error", err)
		return err
	}

	header := tcc.GetHeader(common.ZERO_HASH, uint64(1))

	_, err = execute(tcc, data, messageSenderAddress, state, header, new(big.Int))
	if err != nil {
		return err
	}

	return nil
}

func TestSuite(t *testing.T) {
	sdb := newStateDb()

	var err error

	err = runAllTestsWithDefaultAddress(sdb)
	if err != nil {
		fmt.Println("runAllTestsWithDefaultAddress error", "failed", err)
		//t.Fatalf("runAllTestsWithDefaultAddress failed") //todo: fix
	}

	err = runAllTests(sdb, "runAllTests1")
	if err != nil {
		fmt.Println("runAllTests1 error", "failed", err)
		t.Fatalf("runAllTests1 failed")
	}

	err = runAllTests(sdb, "runAllTests2")
	if err != nil {
		fmt.Println("runAllTests2 error", "failed", err)
		t.Fatalf("runAllTests2 failed")
	}

	err = runAllTests(sdb, "runAllTests4")
	if err != nil {
		fmt.Println("runAllTests4 error", "failed", err)
		t.Fatalf("runAllTests4 failed")
	}

	err = runAllTests(sdb, "runAllTests3")
	if err != nil {
		fmt.Println("runAllTests3 error", "failed", err)
		//t.Fatalf("runAllTests3 failed") //todo: fix
	}

}

func TestGetInputAddress(t *testing.T) {
	var err error
	sdb := newStateDb()

	err = getInputAddressTest(sdb, common.HexToAddress("0xa000000000000000000000000000000000000000000000000000000000001000"))
	if err != nil {
		fmt.Println(err)
		t.Fatalf("failed 1")
	}
}

func TestGetAddress(t *testing.T) {
	var err error
	sdb := newSimpleStateDb()

	err = getAddressTest(sdb)
	if err != nil {
		fmt.Println(err)
		t.Fatalf("failed 2")
	}
}
